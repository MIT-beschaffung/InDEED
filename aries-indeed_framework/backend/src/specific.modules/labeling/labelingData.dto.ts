import { ApiProperty } from "@nestjs/swagger";
import {IsArray, IsNotEmpty, ValidateNested} from "class-validator";
import {roles} from "../../generic.modules/schemas/roles.enum";
import {labelingMerkleProofDto} from "./labelingProof.dto";

export class loggedProsumerDataDto {

    @ApiProperty({name: 'consumedPower', description: 'The amount of electricity the owner consumed in kWh'})
    // @IsNotEmpty()
    consumedPower: number;

    @ApiProperty({name: 'greenPower', description: 'The amount of electricity spent in kWh'})
    @IsNotEmpty()
    greenPower: number;

    @ApiProperty({name: 'grayPower', description: 'The amount of electricity spent in kWh'})
    @IsNotEmpty()
    grayPower: number;

    @ApiProperty({name: 'ownerPubKey_x', description: "The owner's public key x-coordinate"})
    @IsNotEmpty()
    ownerPubKey_x: string;

    @ApiProperty({name: 'ownerPubKey_y', description: "The owner's public key y-coordinate"})
    // @IsNotEmpty()    // Only Producers need y-coordinate 
    ownerPubKey_y: string;

    @ApiProperty({name: 'signedMsg', description: "The owner's signedMsg"})
    // @IsNotEmpty()    // Only Producers have a signedMsg = [R[x], R[y], S] generated by poseidon
    signedMsg: string[];

    @ApiProperty({name: 'timestamp', description: "The timestamp of the logged entry"})
    @IsNotEmpty()
    timestamp: number;

    @ApiProperty({name: 'role', description: "The owner's role (Producer or Consumer"})
    @IsNotEmpty()
    role: string;

    @ApiProperty({name: 'epoch', description: "The epoch number"})
    @IsNotEmpty()
    epoch: number;

    constructor(
        consumedPower: number,
        greenPower: number,
        grayPower: number,
        ownerPubkey_x: string,
        ownerPubkey_y: string,
        signedMsg: string[],
        timestamp: number,
        role: string,
        epoch: number,
    ) {
        this.consumedPower = consumedPower;
        this.greenPower = greenPower;
        this.grayPower = grayPower;
        this.ownerPubKey_x = ownerPubkey_x;
        this.ownerPubKey_y = ownerPubkey_y;
        this.signedMsg = signedMsg,
        this.timestamp = timestamp,
        this.role = role;
        this.epoch = epoch;
    }

    setConsumedPower(consumedPower: number) {
        this.consumedPower = consumedPower;
    }

    getConsumedPower(): number {
        return this.consumedPower;
    }

    setGreenPower(greenPower: number) {
        this.greenPower = greenPower;
    }

    getGreenPower(): number {
        return this.greenPower;
    }

    setGrayPower(grayPower: number) {
        this.greenPower = grayPower;
    }
    
    setOwnerPubkey_x(ownerPubKey_x: string) {
        this.ownerPubKey_x = ownerPubKey_x;
    }
    
    getOwnerPubkey_x(ownerPubKey_x: string) {
        return this.ownerPubKey_x;
    }

    getGrayPower(): number {
        return this.grayPower;
    }

    setOwnerPubkey_y(ownerPubKey_y: string) {
        this.ownerPubKey_y = ownerPubKey_y;
    }
    
    getOwnerPubkey_y(): string {
        return this.ownerPubKey_y;
    }

    setSignedMsg(signedMsg: string[]) {
        this.signedMsg = signedMsg;
    }
    
    getSignedMsg(): string[] {
        return this.signedMsg;
    }
    
    setTimestamp(timestamp: number){
        this.timestamp = timestamp;
    }

    getTimestamp(): number {
        return this.timestamp;
    }

    setRole(role: string) {
        this.role = role;
    }

    getRole(): string {
        return this.role;
    }

    setEpoch(epoch: number){
        this.epoch = epoch;
    }

    getEpoch(): number {
        return this.epoch;
    }

}